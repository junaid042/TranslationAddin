{"version":3,"file":"commands.js","mappings":"AAOAA,OAAOC,SAAQ,SAoGfD,OAAOE,QAAQC,UAAU,qBA7EzBC,eAAiCC,GAC/B,IAEE,MAAMC,QA2BD,IAAIC,SAAQ,CAACC,EAASC,KAC3BT,OAAOU,QAAQC,QAAQC,KAAKC,qBAAqBb,OAAOc,aAAaC,MAAOC,IACtEA,EAAOC,SAAWjB,OAAOkB,kBAAkBC,UAC7CX,EAAQQ,EAAOI,MAAMC,MAErBZ,EAAOO,EAAOM,MAAMC,QACtB,GACA,IAjCF,IAAKjB,EAAc,CACjBkB,QAAQF,MAAM,qBACd,MAAMC,EAA6C,CACjDE,KAAMzB,OAAO0B,aAAaC,4BAA4BC,qBACtDL,QAAS,2DACTM,KAAM,aACNC,YAAY,GAKd,OAFA9B,OAAOU,QAAQC,QAAQC,KAAKmB,qBAAqBC,aAAa,gCAAiCT,QAC/FlB,EAAM4B,WAER,CACA,MAAMC,QAwBV9B,eAA6B+B,GAC3B,MAIMC,EAAOC,KAAKC,UAAU,CAC1BH,KAAMA,IAGFI,QAAiBC,MARR,uEAQsB,CACnCC,OAAQ,OACRC,QATc,CACd,eAAgB,oBAShBN,KAAMA,IAGR,IAAKG,EAASI,GACZ,MAAM,IAAIC,MAAM,2BAA2BL,EAASM,cAItD,aADmBN,EAASO,QAChBC,WACd,CA7CiCC,CAAc1C,SA+C/C,SAAyB4B,GACvB,OAAO,IAAI3B,SAAQ,CAACC,EAASC,KAC3B,MAAMwC,EAAc,kBAAkBf,UACtClC,OAAOU,QAAQC,QAAQC,KAAKsC,qBAAqBD,EAAa,CAAEE,aAAcnD,OAAOc,aAAasC,OAASC,IACrGA,EAAYpC,SAAWjB,OAAOkB,kBAAkBC,UAClDX,IAEAC,EAAO4C,EAAY/B,MAAMC,QAC3B,GACA,GAEN,CAzDU+B,CAAgBpB,GAGtB7B,EAAM4B,YACNT,QAAQ+B,IAAI,yCACd,CAAE,MAAOjC,GACPE,QAAQF,MAAM,UAAWA,GACzBjB,EAAM4B,WACR,CACF","sources":["webpack://office-addin-taskpane/./src/commands/commands.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {\n  // If needed, Office.js is ready to be called.\n});\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event\n */\nfunction action(event: Office.AddinCommands.Event) {\n  const message: Office.NotificationMessageDetails = {\n    type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n    message: \"Performed action.\",\n    icon: \"Icon.80x80\",\n    persistent: true,\n  };\n\n  // Show a notification message.\n  Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n\n  // Be sure to indicate when the add-in command function is complete.\n  event.completed();\n}\n\nasync function translateMailBody(event: Office.AddinCommands.Event) {\n  try {\n\n    const selectedText = await getSelectedText();\n    if (!selectedText) {\n      console.error(\"No text selected.\");\n      const message: Office.NotificationMessageDetails = {\n        type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n        message: \"No text selected! Please select any text from mail body.\",\n        icon: \"Icon.80x80\",\n        persistent: true,\n      };\n      // Show a notification message.\n      Office.context.mailbox.item.notificationMessages.replaceAsync(\"ActionPerformanceNotification\", message);\n      event.completed();\n      return;\n    }\n    const translatedText = await translateText(selectedText);\n    await setSelectedText(translatedText);\n\n    // Be sure to indicate when the add-in command function is complete.\n    event.completed();\n    console.log(\"Selected text translated successfully.\");\n  } catch (error) {\n    console.error(\"Error: \", error);\n    event.completed();\n  }\n}\n\nfunction getSelectedText(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    Office.context.mailbox.item.getSelectedDataAsync(Office.CoercionType.Text, (result) => {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        resolve(result.value.data as string);\n      } else {\n        reject(result.error.message);\n      }\n    });\n  });\n}\n\nasync function translateText(text: string): Promise<string> {\n  const apiUrl = 'https://us-central1-auditex-b2a31.cloudfunctions.net/function-1-test';\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const body = JSON.stringify({\n    text: text\n  });\n\n  const response = await fetch(apiUrl, {\n    method: 'POST',\n    headers: headers,\n    body: body\n  });\n\n  if (!response.ok) {\n    throw new Error(`Error translating text: ${response.statusText}`);\n  }\n\n  const data = await response.json();\n  return data.translation;\n}\n\nfunction setSelectedText(translatedText: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const htmlContent = `<div dir=\"rtl\">${translatedText}</div>`;\n    Office.context.mailbox.item.setSelectedDataAsync(htmlContent, { coercionType: Office.CoercionType.Html }, (asyncResult) => {\n      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n        resolve();\n      } else {\n        reject(asyncResult.error.message);\n      }\n    });\n  });\n}\n// Register the function with Office.\nOffice.actions.associate(\"translateMailBody\", translateMailBody);\n"],"names":["Office","onReady","actions","associate","async","event","selectedText","Promise","resolve","reject","context","mailbox","item","getSelectedDataAsync","CoercionType","Text","result","status","AsyncResultStatus","Succeeded","value","data","error","message","console","type","MailboxEnums","ItemNotificationMessageType","InformationalMessage","icon","persistent","notificationMessages","replaceAsync","completed","translatedText","text","body","JSON","stringify","response","fetch","method","headers","ok","Error","statusText","json","translation","translateText","htmlContent","setSelectedDataAsync","coercionType","Html","asyncResult","setSelectedText","log"],"sourceRoot":""}